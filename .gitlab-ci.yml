stages:
  - build
  - test
  - prepare
#  - deploy

variables:
  DOCKER_TLS_CERTDIR: ""

# define cache to speed up build job
#cache:
#  key: ${CI_COMMIT_REF_SLUG}
#  paths:
#    - ./

deploy-to-ecr:
  stage: prepare
  image: docker:stable
  services:
    - docker:dind
  variables:
    AWS_ECR_REPOSITORY_URL: ''
    AWS_ECS_CLUSTER_NAME: "development-cluster"
    AWS_ECS_SERVICE_NAME: "development-backend"
  before_script:
    # Install AWS cli and login to ECR repo
    - apk add --no-cache curl jq python3 py-pip
    - pip install awscli
    - $(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION)
    - IMAGE_TAG="$(echo $CI_COMMIT_SHA | head -c 8)"
  script:
    # Build Docker image and push it to ECR
    - docker build -t ${REPOSITORY_URL}:development -f .docker/build/apache/Dockerfile .
    - echo "Tagging image..."
    - echo ${REPOSITORY_URL}
    - docker tag ${REPOSITORY_URL}:development ${REPOSITORY_URL}:${IMAGE_TAG}
    - echo "Pushing image..."
    - docker push ${REPOSITORY_URL}:development
    - docker push ${REPOSITORY_URL}:${IMAGE_TAG}
    - echo ${IMAGE_TAG}
    - echo export ECR_DOCKER_IMAGE_TAG="${IMAGE_TAG}" > variables.env
    - aws ecs update-service --cluster development-cluster --service development-backend --force
  only:
    - development
#
#deploy-to-ecs:
#  stage: deploy
#  image: docker:stable
#  dependencies:
#    - deploy-to-ecr
#  services:
#    - docker:dind
#  variables:
#    AWS_ECS_CLUSTER_NAME: "development-cluster"
#    AWS_ECS_SERVICE_NAME: "development-backend"
#  before_script:
#    - apk add --no-cache curl jq python3 py-pip
#    - pip3 install awscli boto3
#    - IMAGE_TAG="$(echo $CI_COMMIT_SHA | head -c 8)"
#  script:
#    - echo ${IMAGE_TAG}
#    - aws ecs update-service --cluster $ECS_CLUSTER --service $ECS_SERVICE --force
#    - python3 .gitlab-ci/post-deploy.py --ecs_cluster $AWS_ECS_CLUSTER_NAME --ecs_service $AWS_ECS_SERVICE_NAME --maxtimeout 420
#  only:
#    - development
